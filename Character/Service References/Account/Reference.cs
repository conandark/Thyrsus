//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Thyrsus.Character.Account {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerTypes", Namespace="http://schemas.datacontract.org/2004/07/")]
    public enum ServerTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Account = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Character = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ZoneProcess = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InterServer = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Ah_Logon_Exist", Namespace="http://schemas.datacontract.org/2004/07/Thyrsus.Shared")]
    [System.SerializableAttribute()]
    public partial class Ah_Logon_Exist : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PersonalnumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalUsingTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Aid {
            get {
                return this.AidField;
            }
            set {
                if ((this.AidField.Equals(value) != true)) {
                    this.AidField = value;
                    this.RaisePropertyChanged("Aid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Personalnumber {
            get {
                return this.PersonalnumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonalnumberField, value) != true)) {
                    this.PersonalnumberField = value;
                    this.RaisePropertyChanged("Personalnumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalUsingTime {
            get {
                return this.TotalUsingTimeField;
            }
            set {
                if ((this.TotalUsingTimeField.Equals(value) != true)) {
                    this.TotalUsingTimeField = value;
                    this.RaisePropertyChanged("TotalUsingTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Account.IAccount")]
    public interface IAccount {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/RegisterServer", ReplyAction="http://tempuri.org/IAccount/RegisterServerResponse")]
        bool RegisterServer(int sid, string ip, int port, string name, Thyrsus.Character.Account.ServerTypes type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/RegisterServer", ReplyAction="http://tempuri.org/IAccount/RegisterServerResponse")]
        System.Threading.Tasks.Task<bool> RegisterServerAsync(int sid, string ip, int port, string name, Thyrsus.Character.Account.ServerTypes type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/Ha_Logon", ReplyAction="http://tempuri.org/IAccount/Ha_LogonResponse")]
        Thyrsus.Character.Account.Ah_Logon_Exist Ha_Logon(int aid, int authcode, byte sex, int userCount, int sid, int ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/Ha_Logon", ReplyAction="http://tempuri.org/IAccount/Ha_LogonResponse")]
        System.Threading.Tasks.Task<Thyrsus.Character.Account.Ah_Logon_Exist> Ha_LogonAsync(int aid, int authcode, byte sex, int userCount, int sid, int ip);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountChannel : Thyrsus.Character.Account.IAccount, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountClient : System.ServiceModel.ClientBase<Thyrsus.Character.Account.IAccount>, Thyrsus.Character.Account.IAccount {
        
        public AccountClient() {
        }
        
        public AccountClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RegisterServer(int sid, string ip, int port, string name, Thyrsus.Character.Account.ServerTypes type) {
            return base.Channel.RegisterServer(sid, ip, port, name, type);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterServerAsync(int sid, string ip, int port, string name, Thyrsus.Character.Account.ServerTypes type) {
            return base.Channel.RegisterServerAsync(sid, ip, port, name, type);
        }
        
        public Thyrsus.Character.Account.Ah_Logon_Exist Ha_Logon(int aid, int authcode, byte sex, int userCount, int sid, int ip) {
            return base.Channel.Ha_Logon(aid, authcode, sex, userCount, sid, ip);
        }
        
        public System.Threading.Tasks.Task<Thyrsus.Character.Account.Ah_Logon_Exist> Ha_LogonAsync(int aid, int authcode, byte sex, int userCount, int sid, int ip) {
            return base.Channel.Ha_LogonAsync(aid, authcode, sex, userCount, sid, ip);
        }
    }
}
